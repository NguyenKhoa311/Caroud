# Generated by Django 5.2.7 on 2025-10-24 07:49

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('game', '0002_initial'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FriendInviteLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique code for the invite link', unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the link was created')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When the link expires (null = never)', null=True)),
                ('max_uses', models.IntegerField(blank=True, help_text='Maximum uses allowed (null = unlimited)', null=True)),
                ('uses_count', models.IntegerField(default=0, help_text='Number of times the link has been used')),
                ('is_active', models.BooleanField(default=True, help_text='If the link is currently active')),
                ('user', models.ForeignKey(help_text='User who created this invite link', on_delete=django.db.models.deletion.CASCADE, related_name='friend_invite_links', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GameRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the game room', max_length=100)),
                ('code', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique code for joining the room', unique=True)),
                ('is_public', models.BooleanField(default=False, help_text='If true, anyone with link can join')),
                ('max_players', models.IntegerField(default=2, help_text='Maximum number of players (currently only 2)')),
                ('status', models.CharField(choices=[('waiting', 'Waiting for Players'), ('ready', 'Ready to Start'), ('active', 'Game in Progress'), ('finished', 'Game Finished'), ('closed', 'Room Closed')], default='waiting', help_text='Current room status', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When room was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last room update')),
                ('settings', models.JSONField(default=dict, help_text='Game settings (board size, time limit, etc.)')),
                ('game', models.ForeignKey(blank=True, help_text='Active game in this room', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='room', to='game.match')),
                ('host', models.ForeignKey(help_text='User who created the room', on_delete=django.db.models.deletion.CASCADE, related_name='hosted_rooms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RoomInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('expired', 'Expired')], default='pending', help_text='Current invitation status', max_length=10)),
                ('message', models.TextField(blank=True, help_text='Optional message from sender', max_length=200, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When invitation was sent')),
                ('responded_at', models.DateTimeField(blank=True, help_text='When invitation was accepted/rejected', null=True)),
                ('from_user', models.ForeignKey(help_text='User who sent the invitation', on_delete=django.db.models.deletion.CASCADE, related_name='sent_room_invitations', to=settings.AUTH_USER_MODEL)),
                ('room', models.ForeignKey(help_text='The game room', on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='users.gameroom')),
                ('to_user', models.ForeignKey(help_text='User who received the invitation', on_delete=django.db.models.deletion.CASCADE, related_name='received_room_invitations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RoomParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True, help_text='When user joined the room')),
                ('has_left', models.BooleanField(default=False, help_text='If user has left the room')),
                ('is_ready', models.BooleanField(default=False, help_text='If user is ready to start the game')),
                ('room', models.ForeignKey(help_text='The game room', on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='users.gameroom')),
                ('user', models.ForeignKey(help_text='The participant user', on_delete=django.db.models.deletion.CASCADE, related_name='room_participations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['joined_at'],
            },
        ),
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], default='pending', help_text='Current status of the friend request', max_length=10)),
                ('message', models.TextField(blank=True, help_text='Optional message from sender', max_length=200, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the request was sent')),
                ('responded_at', models.DateTimeField(blank=True, help_text='When the request was accepted/rejected', null=True)),
                ('from_user', models.ForeignKey(help_text='User who sent the friend request', on_delete=django.db.models.deletion.CASCADE, related_name='sent_friend_requests', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(help_text='User who received the friend request', on_delete=django.db.models.deletion.CASCADE, related_name='received_friend_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['from_user', 'status'], name='users_frien_from_us_c69902_idx'), models.Index(fields=['to_user', 'status'], name='users_frien_to_user_40b48f_idx')],
                'unique_together': {('from_user', 'to_user')},
            },
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When friendship was established')),
                ('is_blocked', models.BooleanField(default=False, help_text='If user has blocked this friend')),
                ('social_source', models.CharField(choices=[('direct', 'Direct Request'), ('facebook', 'Facebook'), ('google', 'Google'), ('invite_link', 'Invite Link')], default='direct', help_text='How the friendship was initiated', max_length=20)),
                ('friend', models.ForeignKey(help_text='The friend user', on_delete=django.db.models.deletion.CASCADE, related_name='friend_of', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='User who owns this friendship record', on_delete=django.db.models.deletion.CASCADE, related_name='friendships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'is_blocked'], name='users_frien_user_id_403d73_idx')],
                'unique_together': {('user', 'friend')},
            },
        ),
        migrations.AddIndex(
            model_name='gameroom',
            index=models.Index(fields=['code'], name='users_gamer_code_0b162d_idx'),
        ),
        migrations.AddIndex(
            model_name='gameroom',
            index=models.Index(fields=['host', 'status'], name='users_gamer_host_id_a2924a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='roominvitation',
            unique_together={('room', 'to_user')},
        ),
        migrations.AlterUniqueTogether(
            name='roomparticipant',
            unique_together={('room', 'user')},
        ),
    ]
